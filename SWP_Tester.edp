int	xini=0.0; int	xfin=10.0; int yini=-5.0; int yfin=5.0; // x and y dimensions of the cell
real haxis1 = 1.5; // horizontal axis of the ellipsoidal particle
real vaxis1 = 1.0; // vertical axis of the ellipsoidal particle
real xcenter1 = (xfin/2.0);
real angle1 = 0.01*pi/180.0;
real distance = xfin;
// Defining the bounding box
border a1(t=xini,xfin){x=t;y=yini;label=901;}; 
border a2(t=yini,yfin){x=xfin;y=t;label=902;};
border a3(t=xini,xfin){x=xfin-t;y=yfin;label=903;};
border a4(t=yini,yfin){x=xini;y=-t;label=904;};
// Defining the ellipsoidal particle
border C0(t=0,2*pi){x=xcenter1 +haxis1*cos(t)*cos(angle1) -vaxis1*sin(t)*sin(angle1); y=0.0 +haxis1*cos(t)*sin(angle1) +vaxis1*sin(t)*cos(angle1);label=0;};
// Variables ::
real vol, cellvol, Hdmg;
real[int,int] M(1,6); // M(no_particles, no_attributes) | attributes: 0_label, 1_mx, 2_my, 3_, 4_particle_volume, 5_
real[int,int] D(2,2), DM(1,2), G(1,2);
real mtheta = 1.0*pi/180.0; //from positive horizontal axis, and counterclock-wise. Angle of the
ofstream outfile( "tester01.dat" );
M= 0.0;
D= 0.0;
DM= 0.0;

// Mesh for calculating the volume of the particle.
mesh Th0=buildmesh(C0(30));
vol= int2d(Th0)(1.0);

mesh Th=buildmesh(a1(30)+a2(30)+a3(30)+a4(30)+C0(-30));
plot(Th);
fespace V(Th, P1, periodic=[[901,x],[903,x],[902,y],[904,y]]);
  V ui, vi, ue, ve, w, phi, hx, hy;

// Initialization of variables
M(0,1)=cos(mtheta);
M(0,2)=sin(mtheta);
D(0,0)= 0.5;
D(0,1)= 0.0;
D(1,0)= 0.0;
D(1,1)= 0.5;
DM(0,0)= D(0,0)*M(0,1);
DM(0,1)= D(1,1)*M(0,2);
G(0,0)= DM(0,0) -M(0,1) -dx(ui);
G(0,1)= DM(0,1) -M(0,2) -dx(ui);

// Solution of the interior problem
// -Laplace(ui) =0, in M
// nu.nabla(ui) = nu.(Dm)
solve Interior(ui,vi)=
    int2d(Th,0)( dx(ui)*dx(vi) + dy(ui)*dy(vi) )
    +int1d(Th,0)( ([DM(0,0),DM(0,1)]'*[N.x,N.y])*vi);
//plot(Th, ui, value=1, fill=1, wait=1);

// Solution of the exterior problem
// -Laplace(ue) =0, in Space -M 
// nu.nabla(ue) =nu.(nabla(ue) - Boundary M )
solve Exterior(ue,ve)=
    int2d(Th)( dx(ue)*dx(ve) +dy(ue)*dy(ve) )
    +int1d(Th,0)( ([G(0,0),G(0,1)]'*[N.x,N.y])*ve);

// Solution of the Cell problem
// -Laplace(w) = 0 in Y 
// nu.nabla(w) = ei.nu
solve Cell(w,phi)=
    int2d(Th)( dx(w)*dx(phi) +dy(w)*dy(phi) )
    +int1d(Th,0)( ([0.,1.]'*[N.x,N.y] )*phi);
plot(Th, w, value=1, fill=1, wait=1); //null results for w
hx = dx(ue);
hy = dy(ue);
cellvol= int2d(Th0)( dy(w) );
cout << cellvol << endl;